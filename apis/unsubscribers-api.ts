/* tslint:disable */
/* eslint-disable */
/**
 * YCloud API
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, USER_AGENT, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { Unsubscriber } from '../models';
// @ts-ignore
import { UnsubscriberChannel } from '../models';
// @ts-ignore
import { UnsubscriberCreateRequest } from '../models';
// @ts-ignore
import { UnsubscriberPage } from '../models';
/**
 * UnsubscribersApi - axios parameter creator
 * @export
 */
const UnsubscribersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an unsubscriber. An unsubscriber is a configuration item representing that customers opt out of receiving messages from your business. **A customer and a channel form a unique identifier for an unsubscriber.**
         * @summary Create an unsubscriber
         * @param {UnsubscriberCreateRequest} unsubscriberCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (unsubscriberCreateRequest: UnsubscriberCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'unsubscriberCreateRequest' is not null or undefined
            assertParamExists('create', 'unsubscriberCreateRequest', unsubscriberCreateRequest)
            const localVarPath = `/unsubscribers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;
            localVarRequestOptions.data = serializeDataIfNeeded(unsubscriberCreateRequest, localVarRequestOptions, configuration)

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the unsubscriber for the specified customer and channel.
         * @summary Delete an unsubscriber
         * @param {string} customer The customer who has opted out.
         * @param {UnsubscriberChannel} channel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByCustomerAndChannel: async (customer: string, channel: UnsubscriberChannel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customer' is not null or undefined
            assertParamExists('deleteByCustomerAndChannel', 'customer', customer)
            // verify required parameter 'channel' is not null or undefined
            assertParamExists('deleteByCustomerAndChannel', 'channel', channel)
            const localVarPath = `/unsubscribers/{customer}/{channel}`
                .replace(`{${"customer"}}`, encodeURIComponent(String(customer)))
                .replace(`{${"channel"}}`, encodeURIComponent(String(channel)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a paginated list of unsubscribers.
         * @summary List unsubscribers
         * @param {UnsubscribersApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (requestParameters: UnsubscribersApiListRequest = {}, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            let page = requestParameters['page'];
            let limit = requestParameters['limit'];
            let includeTotal = requestParameters['includeTotal'];
            let pageAfter = requestParameters['pageAfter'];
            let filterCustomer = requestParameters['filterCustomer'];
            let filterChannel = requestParameters['filterChannel'];
            let filterRegionCode = requestParameters['filterRegionCode'];
            const localVarPath = `/unsubscribers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (includeTotal !== undefined) {
                localVarQueryParameter['includeTotal'] = includeTotal;
            }

            if (pageAfter !== undefined) {
                localVarQueryParameter['pageAfter'] = pageAfter;
            }

            if (filterCustomer !== undefined) {
                localVarQueryParameter['filter.customer'] = filterCustomer;
            }

            if (filterChannel !== undefined) {
                localVarQueryParameter['filter.channel'] = filterChannel;
            }

            if (filterRegionCode !== undefined) {
                localVarQueryParameter['filter.regionCode'] = filterRegionCode;
            }


    
            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all unsubscribers for the specified customer.
         * @summary List all unsubscribers by customer
         * @param {string} customer The customer who has opted out.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllByCustomer: async (customer: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customer' is not null or undefined
            assertParamExists('listAllByCustomer', 'customer', customer)
            const localVarPath = `/unsubscribers/{customer}`
                .replace(`{${"customer"}}`, encodeURIComponent(String(customer)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the unsubscriber for the specified customer and channel.
         * @summary Retrieve an unsubscriber
         * @param {string} customer The customer who has opted out.
         * @param {UnsubscriberChannel} channel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveByCustomerAndChannel: async (customer: string, channel: UnsubscriberChannel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customer' is not null or undefined
            assertParamExists('retrieveByCustomerAndChannel', 'customer', customer)
            // verify required parameter 'channel' is not null or undefined
            assertParamExists('retrieveByCustomerAndChannel', 'channel', channel)
            const localVarPath = `/unsubscribers/{customer}/{channel}`
                .replace(`{${"customer"}}`, encodeURIComponent(String(customer)))
                .replace(`{${"channel"}}`, encodeURIComponent(String(channel)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UnsubscribersApi - functional programming interface
 * @export
 */
const UnsubscribersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UnsubscribersApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates an unsubscriber. An unsubscriber is a configuration item representing that customers opt out of receiving messages from your business. **A customer and a channel form a unique identifier for an unsubscriber.**
         * @summary Create an unsubscriber
         * @param {UnsubscriberCreateRequest} unsubscriberCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(unsubscriberCreateRequest: UnsubscriberCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Unsubscriber>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(unsubscriberCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the unsubscriber for the specified customer and channel.
         * @summary Delete an unsubscriber
         * @param {string} customer The customer who has opted out.
         * @param {UnsubscriberChannel} channel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteByCustomerAndChannel(customer: string, channel: UnsubscriberChannel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Unsubscriber>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteByCustomerAndChannel(customer, channel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a paginated list of unsubscribers.
         * @summary List unsubscribers
         * @param {UnsubscribersApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: UnsubscribersApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnsubscriberPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all unsubscribers for the specified customer.
         * @summary List all unsubscribers by customer
         * @param {string} customer The customer who has opted out.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllByCustomer(customer: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Unsubscriber>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllByCustomer(customer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the unsubscriber for the specified customer and channel.
         * @summary Retrieve an unsubscriber
         * @param {string} customer The customer who has opted out.
         * @param {UnsubscriberChannel} channel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveByCustomerAndChannel(customer: string, channel: UnsubscriberChannel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Unsubscriber>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveByCustomerAndChannel(customer, channel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UnsubscribersApi - factory interface
 * @export
 */
const UnsubscribersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UnsubscribersApiFp(configuration)
    return {
        /**
         * Creates an unsubscriber. An unsubscriber is a configuration item representing that customers opt out of receiving messages from your business. **A customer and a channel form a unique identifier for an unsubscriber.**
         * @summary Create an unsubscriber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(unsubscriberCreateRequest: UnsubscriberCreateRequest, options?: any): AxiosPromise<Unsubscriber> {
            return localVarFp.create(unsubscriberCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the unsubscriber for the specified customer and channel.
         * @summary Delete an unsubscriber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByCustomerAndChannel(customer: string, channel: UnsubscriberChannel, options?: any): AxiosPromise<Unsubscriber> {
            return localVarFp.deleteByCustomerAndChannel(customer, channel, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated list of unsubscribers.
         * @summary List unsubscribers
         * @param {UnsubscribersApiListRequest} requestParameters Request parameters.
         * @param {number} [page] Page number of the results to be returned, 1-based.
         * @param {number} [limit] A limit on the number of results to be returned, or number of results per page, between 1 and 100, defaults to 10.
         * @param {boolean} [includeTotal] Return results inside an object that contains the total result count or not.
         * @param {string} [pageAfter] A cursor to fetch the next page in cursor pagination. For example, if you make a list request, receive 100 objects and &#x60;cursor.after&#x3D;id:foo&#x60;, your subsequent call can include &#x60;pageAfter&#x3D;id:foo&#x60; in order to fetch the next page of the list.
         * @param {string} [filterCustomer] 
         * @param {UnsubscriberChannel} [filterChannel] 
         * @param {string} [filterRegionCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: UnsubscribersApiListRequest = {}, options?: any): AxiosPromise<UnsubscriberPage> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all unsubscribers for the specified customer.
         * @summary List all unsubscribers by customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllByCustomer(customer: string, options?: any): AxiosPromise<Array<Unsubscriber>> {
            return localVarFp.listAllByCustomer(customer, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the unsubscriber for the specified customer and channel.
         * @summary Retrieve an unsubscriber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveByCustomerAndChannel(customer: string, channel: UnsubscriberChannel, options?: any): AxiosPromise<Unsubscriber> {
            return localVarFp.retrieveByCustomerAndChannel(customer, channel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for list operation in UnsubscribersApi.
 * @export
 * @interface UnsubscribersApiListRequest
 */
export interface UnsubscribersApiListRequest {
    /**
     * Page number of the results to be returned, 1-based.
     * @type {number}
     * @memberof UnsubscribersApiList
     */
    readonly page?: number

    /**
     * A limit on the number of results to be returned, or number of results per page, between 1 and 100, defaults to 10.
     * @type {number}
     * @memberof UnsubscribersApiList
     */
    readonly limit?: number

    /**
     * Return results inside an object that contains the total result count or not.
     * @type {boolean}
     * @memberof UnsubscribersApiList
     */
    readonly includeTotal?: boolean

    /**
     * A cursor to fetch the next page in cursor pagination. For example, if you make a list request, receive 100 objects and &#x60;cursor.after&#x3D;id:foo&#x60;, your subsequent call can include &#x60;pageAfter&#x3D;id:foo&#x60; in order to fetch the next page of the list.
     * @type {string}
     * @memberof UnsubscribersApiList
     */
    readonly pageAfter?: string

    /**
     * 
     * @type {string}
     * @memberof UnsubscribersApiList
     */
    readonly filterCustomer?: string

    /**
     * 
     * @type {UnsubscriberChannel}
     * @memberof UnsubscribersApiList
     */
    readonly filterChannel?: UnsubscriberChannel

    /**
     * 
     * @type {string}
     * @memberof UnsubscribersApiList
     */
    readonly filterRegionCode?: string
}

/**
 * UnsubscribersApi - object-oriented interface
 * @export
 * @class UnsubscribersApi
 * @extends {BaseAPI}
 */
export class UnsubscribersApi extends BaseAPI {
    /**
     * Creates an unsubscriber. An unsubscriber is a configuration item representing that customers opt out of receiving messages from your business. **A customer and a channel form a unique identifier for an unsubscriber.**
     * @summary Create an unsubscriber
     * @param {UnsubscriberCreateRequest} unsubscriberCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnsubscribersApi
     */
    public create(unsubscriberCreateRequest: UnsubscriberCreateRequest, options?: AxiosRequestConfig) {
        return UnsubscribersApiFp(this.configuration).create(unsubscriberCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the unsubscriber for the specified customer and channel.
     * @summary Delete an unsubscriber
     * @param {string} customer The customer who has opted out.
     * @param {UnsubscriberChannel} channel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnsubscribersApi
     */
    public deleteByCustomerAndChannel(customer: string, channel: UnsubscriberChannel, options?: AxiosRequestConfig) {
        return UnsubscribersApiFp(this.configuration).deleteByCustomerAndChannel(customer, channel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a paginated list of unsubscribers.
     * @summary List unsubscribers
     * @param {UnsubscribersApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnsubscribersApi
     */
    public list(requestParameters: UnsubscribersApiListRequest = {}, options?: AxiosRequestConfig) {
        return UnsubscribersApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all unsubscribers for the specified customer.
     * @summary List all unsubscribers by customer
     * @param {string} customer The customer who has opted out.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnsubscribersApi
     */
    public listAllByCustomer(customer: string, options?: AxiosRequestConfig) {
        return UnsubscribersApiFp(this.configuration).listAllByCustomer(customer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the unsubscriber for the specified customer and channel.
     * @summary Retrieve an unsubscriber
     * @param {string} customer The customer who has opted out.
     * @param {UnsubscriberChannel} channel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnsubscribersApi
     */
    public retrieveByCustomerAndChannel(customer: string, channel: UnsubscriberChannel, options?: AxiosRequestConfig) {
        return UnsubscribersApiFp(this.configuration).retrieveByCustomerAndChannel(customer, channel, options).then((request) => request(this.axios, this.basePath));
    }
}
