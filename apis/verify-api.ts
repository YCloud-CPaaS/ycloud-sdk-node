/* tslint:disable */
/* eslint-disable */
/**
 * YCloud API
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Verification } from '../models';
// @ts-ignore
import { VerificationCheck } from '../models';
// @ts-ignore
import { VerificationCheckRequest } from '../models';
// @ts-ignore
import { VerificationSendRequest } from '../models';
/**
 * VerifyApi - axios parameter creator
 * @export
 */
const VerifyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Checks a verification with a phone number, an email address, or a verification ID. A `pending` verification status changes to `approved` once you receive a response with the `valid` parameter is `true`. An approved verification cannot be checked anymore.
         * @summary Check a verification
         * @param {VerificationCheckRequest} [verificationCheckRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check: async (verificationCheckRequest?: VerificationCheckRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/verify/verificationChecks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;
            localVarRequestOptions.data = serializeDataIfNeeded(verificationCheckRequest, localVarRequestOptions, configuration)

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts a verification by sending an SMS, voice, or email message to the recipient. This verification is charged once the message is sent successfully.
         * @summary Start a verification
         * @param {VerificationSendRequest} verificationSendRequest Verification request that needs to be sent.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        send: async (verificationSendRequest: VerificationSendRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verificationSendRequest' is not null or undefined
            assertParamExists('send', 'verificationSendRequest', verificationSendRequest)
            const localVarPath = `/verify/verifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;
            localVarRequestOptions.data = serializeDataIfNeeded(verificationSendRequest, localVarRequestOptions, configuration)

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerifyApi - functional programming interface
 * @export
 */
const VerifyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VerifyApiAxiosParamCreator(configuration)
    return {
        /**
         * Checks a verification with a phone number, an email address, or a verification ID. A `pending` verification status changes to `approved` once you receive a response with the `valid` parameter is `true`. An approved verification cannot be checked anymore.
         * @summary Check a verification
         * @param {VerificationCheckRequest} [verificationCheckRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async check(verificationCheckRequest?: VerificationCheckRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationCheck>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.check(verificationCheckRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Starts a verification by sending an SMS, voice, or email message to the recipient. This verification is charged once the message is sent successfully.
         * @summary Start a verification
         * @param {VerificationSendRequest} verificationSendRequest Verification request that needs to be sent.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async send(verificationSendRequest: VerificationSendRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Verification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.send(verificationSendRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VerifyApi - factory interface
 * @export
 */
const VerifyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VerifyApiFp(configuration)
    return {
        /**
         * Checks a verification with a phone number, an email address, or a verification ID. A `pending` verification status changes to `approved` once you receive a response with the `valid` parameter is `true`. An approved verification cannot be checked anymore.
         * @summary Check a verification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check(verificationCheckRequest?: VerificationCheckRequest, options?: any): AxiosPromise<VerificationCheck> {
            return localVarFp.check(verificationCheckRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Starts a verification by sending an SMS, voice, or email message to the recipient. This verification is charged once the message is sent successfully.
         * @summary Start a verification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        send(verificationSendRequest: VerificationSendRequest, options?: any): AxiosPromise<Verification> {
            return localVarFp.send(verificationSendRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VerifyApi - object-oriented interface
 * @export
 * @class VerifyApi
 * @extends {BaseAPI}
 */
export class VerifyApi extends BaseAPI {
    /**
     * Checks a verification with a phone number, an email address, or a verification ID. A `pending` verification status changes to `approved` once you receive a response with the `valid` parameter is `true`. An approved verification cannot be checked anymore.
     * @summary Check a verification
     * @param {VerificationCheckRequest} [verificationCheckRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifyApi
     */
    public check(verificationCheckRequest?: VerificationCheckRequest, options?: AxiosRequestConfig) {
        return VerifyApiFp(this.configuration).check(verificationCheckRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Starts a verification by sending an SMS, voice, or email message to the recipient. This verification is charged once the message is sent successfully.
     * @summary Start a verification
     * @param {VerificationSendRequest} verificationSendRequest Verification request that needs to be sent.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifyApi
     */
    public send(verificationSendRequest: VerificationSendRequest, options?: AxiosRequestConfig) {
        return VerifyApiFp(this.configuration).send(verificationSendRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
