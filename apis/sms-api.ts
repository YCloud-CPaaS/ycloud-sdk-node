/* tslint:disable */
/* eslint-disable */
/**
 * YCloud API
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, USER_AGENT, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Sms } from '../models';
// @ts-ignore
import { SmsPage } from '../models';
// @ts-ignore
import { SmsSendRequest } from '../models';
/**
 * SmsApi - axios parameter creator
 * @export
 */
const SmsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a paginated list of SMS messages you\'ve previously sent.
         * @summary List SMS records
         * @param {SmsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (requestParameters: SmsApiListRequest = {}, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            let page = requestParameters['page'];
            let limit = requestParameters['limit'];
            let includeTotal = requestParameters['includeTotal'];
            let filterCreateTimeGte = requestParameters['filterCreateTimeGte'];
            let filterCreateTimeLte = requestParameters['filterCreateTimeLte'];
            let filterId = requestParameters['filterId'];
            const localVarPath = `/sms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (includeTotal !== undefined) {
                localVarQueryParameter['includeTotal'] = includeTotal;
            }

            if (filterCreateTimeGte !== undefined) {
                localVarQueryParameter['filter.createTime.gte'] = (filterCreateTimeGte as any instanceof Date) ?
                    (filterCreateTimeGte as any).toISOString() :
                    filterCreateTimeGte;
            }

            if (filterCreateTimeLte !== undefined) {
                localVarQueryParameter['filter.createTime.lte'] = (filterCreateTimeLte as any instanceof Date) ?
                    (filterCreateTimeLte as any).toISOString() :
                    filterCreateTimeLte;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter.id'] = filterId;
            }


    
            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends an outbound text message.
         * @summary Send an SMS
         * @param {SmsSendRequest} smsSendRequest SMS request that needs to be sent.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        send: async (smsSendRequest: SmsSendRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'smsSendRequest' is not null or undefined
            assertParamExists('send', 'smsSendRequest', smsSendRequest)
            const localVarPath = `/sms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;
            localVarRequestOptions.data = serializeDataIfNeeded(smsSendRequest, localVarRequestOptions, configuration)

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SmsApi - functional programming interface
 * @export
 */
const SmsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SmsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a paginated list of SMS messages you\'ve previously sent.
         * @summary List SMS records
         * @param {SmsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: SmsApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmsPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends an outbound text message.
         * @summary Send an SMS
         * @param {SmsSendRequest} smsSendRequest SMS request that needs to be sent.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async send(smsSendRequest: SmsSendRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sms>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.send(smsSendRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SmsApi - factory interface
 * @export
 */
const SmsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SmsApiFp(configuration)
    return {
        /**
         * Returns a paginated list of SMS messages you\'ve previously sent.
         * @summary List SMS records
         * @param {SmsApiListRequest} requestParameters Request parameters.
         * @param {number} [page] Page number of the results to be returned, 1-based.
         * @param {number} [limit] A limit on the number of results to be returned, or number of results per page, between 1 and 100, defaults to 10.
         * @param {boolean} [includeTotal] Return results inside an object that contains the total result count or not.
         * @param {string} [filterCreateTimeGte] Return results where the &#x60;createTime&#x60; field is greater than or equal to this value. Default: One day ago from now.
         * @param {string} [filterCreateTimeLte] Return results where the &#x60;createTime&#x60; field is less than or equal to this value.
         * @param {string} [filterId] Unique object ID on our side. Other filter parameters will be ignored if this parameter is present.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: SmsApiListRequest = {}, options?: any): AxiosPromise<SmsPage> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends an outbound text message.
         * @summary Send an SMS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        send(smsSendRequest: SmsSendRequest, options?: any): AxiosPromise<Sms> {
            return localVarFp.send(smsSendRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for list operation in SmsApi.
 * @export
 * @interface SmsApiListRequest
 */
export interface SmsApiListRequest {
    /**
     * Page number of the results to be returned, 1-based.
     * @type {number}
     * @memberof SmsApiList
     */
    readonly page?: number

    /**
     * A limit on the number of results to be returned, or number of results per page, between 1 and 100, defaults to 10.
     * @type {number}
     * @memberof SmsApiList
     */
    readonly limit?: number

    /**
     * Return results inside an object that contains the total result count or not.
     * @type {boolean}
     * @memberof SmsApiList
     */
    readonly includeTotal?: boolean

    /**
     * Return results where the &#x60;createTime&#x60; field is greater than or equal to this value. Default: One day ago from now.
     * @type {string}
     * @memberof SmsApiList
     */
    readonly filterCreateTimeGte?: string

    /**
     * Return results where the &#x60;createTime&#x60; field is less than or equal to this value.
     * @type {string}
     * @memberof SmsApiList
     */
    readonly filterCreateTimeLte?: string

    /**
     * Unique object ID on our side. Other filter parameters will be ignored if this parameter is present.
     * @type {string}
     * @memberof SmsApiList
     */
    readonly filterId?: string
}

/**
 * SmsApi - object-oriented interface
 * @export
 * @class SmsApi
 * @extends {BaseAPI}
 */
export class SmsApi extends BaseAPI {
    /**
     * Returns a paginated list of SMS messages you\'ve previously sent.
     * @summary List SMS records
     * @param {SmsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsApi
     */
    public list(requestParameters: SmsApiListRequest = {}, options?: AxiosRequestConfig) {
        return SmsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends an outbound text message.
     * @summary Send an SMS
     * @param {SmsSendRequest} smsSendRequest SMS request that needs to be sent.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmsApi
     */
    public send(smsSendRequest: SmsSendRequest, options?: AxiosRequestConfig) {
        return SmsApiFp(this.configuration).send(smsSendRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
