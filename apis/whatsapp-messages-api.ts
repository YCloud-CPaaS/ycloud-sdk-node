/* tslint:disable */
/* eslint-disable */
/**
 * YCloud API
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, USER_AGENT, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { WhatsappMessage } from '../models';
// @ts-ignore
import { WhatsappMessageSendRequest } from '../models';
/**
 * WhatsappMessagesApi - axios parameter creator
 * @export
 */
const WhatsappMessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a WhatsApp message you\'ve previously sent.
         * @summary Retrieve a message
         * @param {string} id ID of the object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieve', 'id', id)
            const localVarPath = `/whatsapp/messages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Enqueues an outbound WhatsApp message for sending.  Queued messages will be submitted to the WhatsApp Business API asynchronously.
         * @summary Enqueue a message
         * @param {WhatsappMessageSendRequest} whatsappMessageSendRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        send: async (whatsappMessageSendRequest: WhatsappMessageSendRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'whatsappMessageSendRequest' is not null or undefined
            assertParamExists('send', 'whatsappMessageSendRequest', whatsappMessageSendRequest)
            const localVarPath = `/whatsapp/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;
            localVarRequestOptions.data = serializeDataIfNeeded(whatsappMessageSendRequest, localVarRequestOptions, configuration)

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends an outbound WhatsApp message directly.  The message is submitted to the WhatsApp Business API synchronously. Typically used for sending OTP and instant messages.  The response body field `error.whatsappApiError` is included if we tried to request the WhatsApp Business API and got an error response.
         * @summary Send a message directly
         * @param {WhatsappMessageSendRequest} whatsappMessageSendRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDirectly: async (whatsappMessageSendRequest: WhatsappMessageSendRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'whatsappMessageSendRequest' is not null or undefined
            assertParamExists('sendDirectly', 'whatsappMessageSendRequest', whatsappMessageSendRequest)
            const localVarPath = `/whatsapp/messages/sendDirectly`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            // const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            if (USER_AGENT) {
                localVarHeaderParameter['User-Agent'] = USER_AGENT;
            }
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            // setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.params = localVarQueryParameter;
            localVarRequestOptions.data = serializeDataIfNeeded(whatsappMessageSendRequest, localVarRequestOptions, configuration)

            return {
                url: localVarPath,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WhatsappMessagesApi - functional programming interface
 * @export
 */
const WhatsappMessagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WhatsappMessagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a WhatsApp message you\'ve previously sent.
         * @summary Retrieve a message
         * @param {string} id ID of the object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieve(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WhatsappMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Enqueues an outbound WhatsApp message for sending.  Queued messages will be submitted to the WhatsApp Business API asynchronously.
         * @summary Enqueue a message
         * @param {WhatsappMessageSendRequest} whatsappMessageSendRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async send(whatsappMessageSendRequest: WhatsappMessageSendRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WhatsappMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.send(whatsappMessageSendRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends an outbound WhatsApp message directly.  The message is submitted to the WhatsApp Business API synchronously. Typically used for sending OTP and instant messages.  The response body field `error.whatsappApiError` is included if we tried to request the WhatsApp Business API and got an error response.
         * @summary Send a message directly
         * @param {WhatsappMessageSendRequest} whatsappMessageSendRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendDirectly(whatsappMessageSendRequest: WhatsappMessageSendRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WhatsappMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendDirectly(whatsappMessageSendRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WhatsappMessagesApi - factory interface
 * @export
 */
const WhatsappMessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WhatsappMessagesApiFp(configuration)
    return {
        /**
         * Retrieves a WhatsApp message you\'ve previously sent.
         * @summary Retrieve a message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(id: string, options?: any): AxiosPromise<WhatsappMessage> {
            return localVarFp.retrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Enqueues an outbound WhatsApp message for sending.  Queued messages will be submitted to the WhatsApp Business API asynchronously.
         * @summary Enqueue a message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        send(whatsappMessageSendRequest: WhatsappMessageSendRequest, options?: any): AxiosPromise<WhatsappMessage> {
            return localVarFp.send(whatsappMessageSendRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends an outbound WhatsApp message directly.  The message is submitted to the WhatsApp Business API synchronously. Typically used for sending OTP and instant messages.  The response body field `error.whatsappApiError` is included if we tried to request the WhatsApp Business API and got an error response.
         * @summary Send a message directly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDirectly(whatsappMessageSendRequest: WhatsappMessageSendRequest, options?: any): AxiosPromise<WhatsappMessage> {
            return localVarFp.sendDirectly(whatsappMessageSendRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WhatsappMessagesApi - object-oriented interface
 * @export
 * @class WhatsappMessagesApi
 * @extends {BaseAPI}
 */
export class WhatsappMessagesApi extends BaseAPI {
    /**
     * Retrieves a WhatsApp message you\'ve previously sent.
     * @summary Retrieve a message
     * @param {string} id ID of the object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsappMessagesApi
     */
    public retrieve(id: string, options?: AxiosRequestConfig) {
        return WhatsappMessagesApiFp(this.configuration).retrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enqueues an outbound WhatsApp message for sending.  Queued messages will be submitted to the WhatsApp Business API asynchronously.
     * @summary Enqueue a message
     * @param {WhatsappMessageSendRequest} whatsappMessageSendRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsappMessagesApi
     */
    public send(whatsappMessageSendRequest: WhatsappMessageSendRequest, options?: AxiosRequestConfig) {
        return WhatsappMessagesApiFp(this.configuration).send(whatsappMessageSendRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends an outbound WhatsApp message directly.  The message is submitted to the WhatsApp Business API synchronously. Typically used for sending OTP and instant messages.  The response body field `error.whatsappApiError` is included if we tried to request the WhatsApp Business API and got an error response.
     * @summary Send a message directly
     * @param {WhatsappMessageSendRequest} whatsappMessageSendRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhatsappMessagesApi
     */
    public sendDirectly(whatsappMessageSendRequest: WhatsappMessageSendRequest, options?: AxiosRequestConfig) {
        return WhatsappMessagesApiFp(this.configuration).sendDirectly(whatsappMessageSendRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
